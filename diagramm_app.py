# -*- coding: utf-8 -*-
"""Diagramm_App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VqCcoGZlLm_lx7rgwpJ-UPm4EDO2KIjt
"""

import streamlit as st
import plotly.graph_objects as go
import pandas as pd

# Bewertungskategorien
categories = [
    "Relationship", "R&D", "Flexibility", "Technical Service",
    "Reaction Short-Term", "Reaction Mid/Long-Term", "Competitive Prices"
]

# Beispiel-Daten (Initialwert)
default_data = pd.DataFrame({
    "Kriterium": categories,
    "BWF": [1, 2, 4.5, 4.5, 3.5, 4.5, 5],
    "BWF Target": [5, 6, 5, 5, 5, 5, 3],
    "Competitor 1": [3, 2, 4.5, 4, 4.5, 5, 4.5],
    "Competitor 2": [4.5, 3, 2, 2, 2, 4.5, 4.5],
    "Competitor 3": [2.5, 3, 4, 3.5, 2.5, 2, 2]
})

st.title("ðŸ§® Wettbewerbsvergleich")

# Eingabetabelle
st.write("Gib die Werte manuell ein oder Ã¤ndere die vorhandenen:")
data = st.data_editor(default_data, num_rows="dynamic", use_container_width=True)

# Farben (optional)
custom_colors = {
    "BWF": "#009DE0",
    "BWF Target": "#0A2837"
}

# Diagramm vorbereiten
fig = go.Figure()

# Spalten iterieren (auÃŸer "Kriterium")
for company in data.columns[1:]:
    fig.add_trace(go.Scatter(
        x=data[company],
        y=data["Kriterium"],
        mode='lines+markers',
        name=company,
        line=dict(
            shape='linear',
            color=custom_colors.get(company),
            width=3
        ),
        marker=dict(size=5)
    ))

# Linie ganz unten simulieren
y_bottom = len(data) - 1 + 0.4
fig.add_shape(
    type="line",
    x0=0, x1=6.5,
    y0=y_bottom, y1=y_bottom,
    xref="x", yref="y",
    line=dict(color="gray", width=2),
    layer="below"
)

fig.update_layout(
    title=dict(
        text="Wettbewerbsprofil (interaktiv)",
        font=dict(color="black")
    ),
    xaxis=dict(
        title=dict(text="Bewertung", font=dict(color="black")),
        tickfont=dict(color="black"),
        showgrid=True,
        gridcolor="lightgray",
        zeroline=True,
        zerolinecolor="gray",
        zerolinewidth=2,
        range=[0, 6.5],
        dtick=1
    ),
    yaxis=dict(
        title=dict(text="Kriterien", font=dict(color="black")),
        tickfont=dict(color="black"),
        showgrid=True,
        gridcolor="lightgray",
        zeroline=False,
        autorange="reversed"
    ),
        legend=dict(
        font=dict(color="black")
    ),
    plot_bgcolor="white",
    paper_bgcolor="white",
    height=600,
    width=950,
    hovermode="y unified"
)

st.plotly_chart(fig, use_container_width=True)
